{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridsItems.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","category","type","value","onChange","target","getGifs","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","id","title","images","downsized_medium","GifGridItems","className","src","alt","GifGrid","setImages","useEffect","then","GifExpertApp","categories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LAiCeA,EA9BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAElB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,cAAC,WAAD,UACI,sBAAMC,SAXO,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAQ,OAAMP,GAAN,mBAAoBO,OAC3CN,EAAc,MAOd,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,e,uBCNlBG,EAAO,uCAAG,WAAOL,GAAP,uBAAAM,EAAA,6DACbC,EADa,iDACmCC,UAAUR,GAD7C,+DAGKS,MAAMF,GAHX,cAGbG,EAHa,gBAIEA,EAAUC,OAJZ,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,gBAAEC,EAAF,EAAEA,GAAGC,EAAL,EAAKA,MAAMC,EAAX,EAAWA,OAAX,MAAwB,CAC1CF,KACAC,QACAT,IAAG,OAAEU,QAAF,IAAEA,OAAF,EAAEA,EAAQC,iBAAiBX,QATf,kBAWZM,GAXY,4CAAH,sDCSLM,EATM,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMT,EAAS,EAATA,IAC5B,OACI,sBAAKa,UAAU,OAAf,UACI,qBAAKC,IAAKd,EAAKe,IAAKN,IACpB,4BAAIA,QC4BDO,EA9BC,SAAC,GAAgB,IAAfvB,EAAc,EAAdA,SAEd,EAA4BR,mBAAS,IAArC,mBAAOyB,EAAP,KAAeO,EAAf,KAWA,OARAC,qBAAU,WACNpB,EAAQL,GACH0B,KAAKF,KACZ,CAACxB,IAMC,qCACI,6BAAKA,IACL,qBAAKoB,UAAU,YAAf,SACKH,EAAOH,KAAI,gBAAEC,EAAF,EAAEA,GAAGC,EAAL,EAAKA,MAAMT,EAAX,EAAWA,IAAX,OACR,cAAC,EAAD,CAEIS,MAAOA,EACPT,IAAKA,GAFAQ,YCUdY,EA7BM,WAEjB,MAAoCnC,mBAAS,IAA7C,mBAAOoC,EAAP,KAAmBrC,EAAnB,KAMA,OACI,qCACA,8CACA,cAAC,EAAD,CACIA,cAAeA,IAEnB,uBAEA,6BACKqC,EAAWd,KAAI,SAAAd,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MClBzB6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1fec14b4.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setinputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 1){\r\n            setCategories( category => [ inputValue,...category]);\r\n            setinputValue('')\r\n        }\r\n        \r\n    }\r\n\r\n    return (  \r\n        <Fragment>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={handleInputChange}\r\n                />\r\n            </form>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default AddCategory;\r\n\r\nAddCategory.propTypes = {\r\n    setCategories:PropTypes.func.isRequired\r\n}","\r\n\r\nexport const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=30&api_key=DlAYItqCSFF2ig0HKLJNIEUwUkFsPEN6`;\r\n\r\n    const respuesta = await fetch(url);\r\n    const {data} = await respuesta.json();\r\n\r\n    const gifs = data.map(({id,title,images}) => ({\r\n        id,\r\n        title,\r\n        url: images?.downsized_medium.url\r\n    }))\r\n    return gifs;\r\n}\r\n","import React from 'react';\r\n\r\nconst GifGridItems = ({id,title,url}) => {\r\n    return (  \r\n        <div className=\"card\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GifGridItems;","import React, { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\nimport GifGridItems from './GifGridsItems';\r\n\r\nconst GifGrid = ({category}) => {\r\n\r\n    const [images, setImages] = useState([]);\r\n\r\n\r\n    useEffect(() =>{\r\n        getGifs(category)\r\n            .then(setImages);\r\n    },[category]);\r\n\r\n    \r\n    \r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            <div className=\"card-grid\">\r\n                {images.map(({id,title,url}) => (\r\n                    <GifGridItems\r\n                        key={id}\r\n                        title={title}\r\n                        url={url}\r\n                    />\r\n                ))}\r\n                \r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifGrid;","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    // const handleAdd = () => {\r\n    //     setCategories([...categories,'HunterXHunter']);\r\n    // }\r\n\r\n    return (  \r\n        <>\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory\r\n            setCategories={setCategories}\r\n        />\r\n        <hr/>\r\n\r\n        <ol>\r\n            {categories.map(category => (\r\n                <GifGrid \r\n                    key={category}\r\n                    category={category}\r\n                />\r\n            ))}\r\n        </ol>\r\n        \r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}